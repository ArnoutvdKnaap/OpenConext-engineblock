Index: config-templates/module_janus.php
===================================================================
--- config-templates/module_janus.php	(revision 484)
+++ config-templates/module_janus.php	(working copy)
@@ -112,6 +112,13 @@
     'enable.shib13-sp' =>   false,
     'enable.shib13-idp' =>  false,
 
+    /*
+     * Janus supports a blacklist (mark idps that are not allowed to connect to an sp)
+     * and/or a whitelist (mark idps that are allowed to connect to an sp). 
+     * You can enable both to make this choice per entity.
+     */
+    'entity.useblacklist' => true,
+    'entity.usewhitelist' => false,
 
     /*
      * Enable self user creation
Index: www/editentity.php
===================================================================
--- www/editentity.php	(revision 484)
+++ www/editentity.php	(working copy)
@@ -228,28 +228,44 @@
     }
 
     // Remote entities
-    if(isset($_POST['add'])) {
-        $mcontroller->setAllowedAll('yes');
+    if(isset($_POST['addBlocked'])) {
         $mcontroller->setAllowedAll('no');
-        foreach($_POST['add'] AS $key) {
+        foreach($_POST['addBlocked'] AS $key) {
             if($mcontroller->addBlockedEntity($key)) {
                 $update = TRUE;
                 $note .= 'Remote entity added: ' . $key . '<br />';
             }
         }
+    } else if (count($mcontroller->getBlockedEntities())) {
+        // There were blocked entities but they were no longer posted; we should clear them all
+        $mcontroller->clearBlockedEntities();
+        $update = TRUE;
     }
 
+
+    if(isset($_POST['addAllowed'])) {
+        $mcontroller->setAllowedAll('no');
+        foreach($_POST['addAllowed'] AS $key) {
+            if($mcontroller->addAllowedEntity($key)) {
+                $update = TRUE;
+                $note .= 'Remote entity added: ' . $key . '<br />';
+            }
+        }
+    } else if (count($mcontroller->getAllowedEntities())) {
+        // There were allowed entities but they were no longer posted; we should clear them all. 
+        $mcontroller->clearAllowedEntities();
+        $update = TRUE;
+    }
+    
+
     // Allowedal
-    if(isset($_POST['allowedall'])) {
-        if($mcontroller->setAllowedAll('yes')) {
+    if(isset($_POST['allowall']) || isset($_POST['allownone'])) {
+        if($mcontroller->setAllowedAll(isset($_POST['allowall'])?'yes':'no')) {
             $update = TRUE;
-            $note .= 'Set allow all remote entities<br />';
+            $mcontroller->clearAllowedEntities();
+            $mcontroller->clearBlockedEntities();
+            $note .= 'Set block/allow all remote entities<br />';
         }
-    } else {
-        if($mcontroller->setAllowedAll('no')) {
-            $update = TRUE;
-            $note .= 'Removed set allow all remote entities<br />';
-        }
     }
 
     // Change workflow
@@ -458,10 +474,13 @@
 $et->data['uiguard'] = new sspmod_janus_UIguard($janus_config->getValue('access'));
 $et->data['mcontroller'] = $mcontroller;
 $et->data['blocked_entities'] = $mcontroller->getBlockedEntities();
+$et->data['allowed_entities'] = $mcontroller->getAllowedEntities();
 $et->data['disable_consent'] = $mcontroller->getDisableConsent();
 $et->data['remote_entities'] = $remote_entities;
 $et->data['arp_list'] = $arp->getARPList();
 $et->data['attribute_fields'] = $janus_config->getValue('attributes');
+$et->data['useblacklist'] = $janus_config->getValue('entity.useblacklist');
+$et->data['usewhitelist'] = $janus_config->getValue('entity.usewhitelist');
 
 $et->data['header'] = 'JANUS';
 if(isset($msg)) {
Index: lib/Entity.php
===================================================================
--- lib/Entity.php	(revision 484)
+++ lib/Entity.php	(working copy)
@@ -508,14 +508,14 @@
      *
      * The function will only return true if the flag is changed.
      *
-     * @param string $allowedall String 'yes'/'no'
+     * @param string $allowedll String 'yes'/'no'
      *
      * @return bool True on change, false othervise
      * @since      Method available since Release 1.0.0
      * @todo Should return true on success. Also if the new value is the same as
      * the old one.
      */
-    public function setAllowedall($allowedall)
+    public function setAllowedAll($allowedall)
     {
         assert('is_string($allowedall)');
 
@@ -528,12 +528,11 @@
     }
 
     /**
-     * Retrive the allowAll flag for the entity
-     *
-     * @return string AllowAll flag
+     * Retrieve the allowall flag for the entity
+     * @return string allowOrBlockAll flag
      * @since Method available since Release 1.0.0
      */
-    public function getAllowedall()
+    public function getAllowedAll()
     {
         return $this->_allowedall;
     }
Index: lib/EntityController.php
===================================================================
--- lib/EntityController.php	(revision 484)
+++ lib/EntityController.php	(working copy)
@@ -64,11 +64,15 @@
      */
     private $_metadata;
 
-    private $_blocked;
+    private $_blocked = array();
+    private $_blockedLoaded = false;
+    
+    private $_allowed = array();
+    private $_allowedLoaded = false;
 
     private $_users;
 
-    private $_modified;
+    private $_modified = false;
 
     private $_arp;
     
@@ -83,7 +87,6 @@
     {
         parent::__construct($config->getValue('store'));
         $this->_config = $config;
-        $this->_modified = false;
     }
 
     /**
@@ -231,14 +234,29 @@
     {
         assert('$this->_entity instanceof Sspmod_Janus_Entity');
 
-        if (empty($this->_blocked)) {
+        if (empty($this->_blocked) && !$this->_blockedLoaded) {
+            // Only load if we haven't loaded it already; otherwise we keep loading repeatedly if the result is empty.
             if (!$this->_loadBlockedEntities()) {
                 return false;
             }
+            $this->_blockedLoaded = true;
         }
         return $this->_blocked;
     }
+    
+    public function getAllowedEntities()
+    {
+        assert('$this->_entity instanceof Sspmod_Janus_Entity');
 
+        if (empty($this->_allowed) && !$this->_allowedLoaded) {
+            if (!$this->_loadAllowedEntities()) {
+                return false;
+            }
+            $this->_allowedLoaded = true;
+        }
+        return $this->_allowed;
+    }
+
     private function _loadArp() {
         assert('$this->_entity instanceof Sspmod_Janus_Entity');
    
@@ -348,6 +366,7 @@
         $metadata->setKey($key);
         $metadata->setValue($value);
         $this->_metadata[] = $metadata;
+        $this->_modified = true;
         // The metadata is not saved, since it is not part of the current
         // entity with current revision id
         return $metadata;
@@ -366,7 +385,6 @@
     public function saveEntity()
     {
         assert('$this->_entity instanceof Sspmod_Janus_Entity');
-
         $this->_entity->save();
         $new_revisionid = $this->_entity->getRevisionid();
  
@@ -376,8 +394,9 @@
         }  
 
         $this->_saveBlockedEntities($new_revisionid);
+        $this->_saveAllowedEntities($new_revisionid);
         $this->_saveDisableConsent($new_revisionid);
-
+        
         return true;	
     }
 
@@ -396,8 +415,11 @@
         $this->getMetadata();
         $this->getArp();
         $this->getBlockedEntities();
+        $this->getAllowedEntities();
         $this->getDisableConsent();
         $this->getUsers();
+        
+        $this->_modified = false;
 
         return true;
     }
@@ -756,6 +778,7 @@
         foreach ($this->_metadata AS &$data) {
             if ($data->getKey() === $key && $data->getValue() !== $value) {
                 $data->setValue($value);
+                $this->_modified = true;
                 $update = true;
             }
         }
@@ -789,6 +812,7 @@
         foreach ($this->_metadata AS $index => &$data) {
             if ($data->getKey() == $key) {
                 unset($this->_metadata[$index]);
+                $this->_modified = true;
                 $update = true;
             }
         }
@@ -831,13 +855,72 @@
     {
         assert('is_string($remoteentityid)');
 
-        unset($this->_blocked[$remoteentityid]);
-        $this->_modified = true;
-
+        if (isset($this->_blocked[$remoteentityid])) {
+            unset($this->_blocked[$remoteentityid]);
+            $this->_modified = true;
+        }
         return true;
     }
+    
+    public function clearBlockedEntities()
+    {
+        if (count($this->_blocked)) {
+            $this->_blocked = array();
+            $this->_modified = true;
+        }
+    }
 
+        /**
+     * Add an entity to the current entitys allowed list
+     *
+     * If the blocked entity is alreade sey, the methos will return true.
+     *
+     * @param string $remoteentityid Entity id of blocked entity
+     *
+     * @return true Return true on success
+     * @since Method available since Release 1.0.0
+     */
+    public function addAllowedEntity($remoteentityid)
+    {
+        assert('is_string($remoteentityid)');
+
+        if (!array_key_exists($remoteentityid, $this->_allowed)) {
+            $this->_allowed[$remoteentityid] 
+                = array('remoteentityid' => $remoteentityid);
+            $this->_modified = true;
+            return true;
+        }
+        return false;
+    }
+
     /**
+     * remove an entity from the current entity allowed list.
+     *
+     * @param string $remoteentityid The entity to be removed
+     *
+     * @return true Returns true on success
+     * @since Method available since Release 1.0.0
+     */
+    public function removeAllowedEntity($remoteentityid)
+    {
+        assert('is_string($remoteentityid)');
+
+        if (isset($this->_allowed[$remoteentityid])) {
+            unset($this->_allowed[$remoteentityid]);
+            $this->_modified = true;
+        }
+        return true;
+    }
+    
+    public function clearAllowedEntities()
+    {
+        if (count($this->_allowed)) {
+            $this->_allowed = array();
+            $this->_modified = true;
+        }
+    }
+    
+    /**
      * Load the blocked entities from the database
      *
      * Fetches the entity id of the blocked entities from the database. The 
@@ -849,9 +932,25 @@
      */
     private function _loadBlockedEntities()
     {
+        return $this->_loadLinkedEntities('blocked');
+    }
+    
+    private function _loadAllowedEntities()
+    {
+        return $this->_loadLinkedEntities('allowed');
+    }
+    
+    /**
+     * 
+     * 
+     * Enter description here ...
+     * @param String $type must be 'blocked' or 'allowed'
+     */
+    private function _loadLinkedEntities($type)
+    {
         $st = $this->execute(
             'SELECT * 
-            FROM '. self::$prefix .'blockedEntity 
+            FROM '. self::$prefix . $type . 'Entity 
             WHERE `eid` = ? AND `revisionid` = ?;',
             array($this->_entity->getEid(), $this->_entity->getRevisionid())
         );
@@ -861,12 +960,12 @@
         }
 
         $row = $st->fetchAll(PDO::FETCH_ASSOC);
-        $this->_blocked = array();
+        
+        $this->{'_'.$type} = array();
 
         foreach ($row AS $data) {
-            $this->_blocked[$data['remoteentityid']] = $data;
+            $this->{'_'.$type}[$data['remoteentityid']] = $data;
         }
-        $this->_modified = false;
 
         return true;
     }
@@ -874,21 +973,26 @@
     /**
      * Set the allowedAll flag for the current entity
      *
-     * When setting the allowedAll flag all blocked entities of the current
+     * When setting the blockOrAllowAll flag all blocked/allowed (depending on
+     * configuration entity.blockmode) entities of the current
      * entity is removed.
      *
-     * @param string $allowedall AllowedAll flag, 'yes'/'no'
+     * @param string $blockorallowall BlockOrAllowAll flag, 'yes'/'no'
      *
-     * @return bool True if the allowedAll flag was changed. Othervise false. 
+     * @return bool True if the blockOrAllowAll flag was changed. Othervise false. 
      * @since      Method available since Release 1.0.0
      */
     public function setAllowedAll($allowedall)
     {
-        $return = $this->_entity->setAllowedall($allowedall);
+        $return = $this->_entity->setAllowedAll($allowedall);
+        
+        // If $return = true, it means it changed.
+        if ($return) {
+            $this->_modified = true;
+        }
         if ($allowedall === 'yes') {
             $this->_blocked = array();
-            $this->_modified = true;
-            return true;
+            $this->_allowed = array();
         }
         return $return;
     }
@@ -907,21 +1011,31 @@
      */
     private function _saveBlockedEntities($revision)
     {
+        return $this->_saveLinkedEntities($revision, "blocked");
+    }
+    
+    private function _saveAllowedEntities($revision)
+    {
+        return $this->_saveLinkedEntities($revision, "allowed");
+    }
+    
+    private function _saveLinkedEntities($revision, $type)
+    {    
         if ($this->_modified) {
-            foreach ($this->_blocked AS $blocked) {
+            foreach ($this->{'_'.$type} AS $linked) {
                 $st = $this->execute(
-                    'INSERT INTO '. self::$prefix .'blockedEntity (
+                    'INSERT INTO '. self::$prefix . $type . 'Entity (
                     `eid`, `revisionid`, `remoteentityid`, `created`, `ip`)
                     VALUES (?, ?, ?, ?, ?);', 
                     array(
                         $this->_entity->getEid(), 
                         $revision, 
-                        $blocked['remoteentityid'], 
+                        $linked['remoteentityid'], 
                         date('c'), 
                         $_SERVER['REMOTE_ADDR'],
                     )
                 );
-
+                
                 if ($st === false) {
                     return false;
                 }
@@ -975,7 +1089,6 @@
         foreach ($row AS $data) {
             $this->_users[$data['userid']] = true;
         }
-        $this->_modified = false;
 
         return true;
     }
@@ -1126,9 +1239,10 @@
     {
         assert('is_string($remoteentityid)');
 
-        unset($this->_disableConsent[$remoteentityid]);
-        $this->_modified = true;
-
+        if (isset($this->_disableConsent[$remoteentityid])) {
+            unset($this->_disableConsent[$remoteentityid]);
+            $this->_modified = true;
+        }
         return true;
     }
     
@@ -1173,7 +1287,6 @@
         foreach ($row AS $data) {
             $this->_disableConsent[$data['remoteentityid']] = $data;
         }
-        $this->_modified = false;
 
         return true;
     }
@@ -1217,9 +1330,10 @@
      */
     public function clearConsent()
     {
-        $this->_disableConsent = array();
-        $this->_modified = true;
-
+        if (count($this->_disableConsent)>0) {
+            $this->_disableConsent = array();
+            $this->_modified = true;
+        }
         return true;
     } 
     
Index: lib/REST/Methods.php
===================================================================
--- lib/REST/Methods.php	(revision 484)
+++ lib/REST/Methods.php	(working copy)
@@ -98,7 +98,7 @@
         $result['parent'] = $entity->getParent();
         $result['revisionnote'] = $entity->getRevisionnote();
         $result['type'] = $entity->gettype();
-        $result['allowedall'] = $entity->getAllowedAll();
+        $result['blockorallowall'] = $entity->getBlockOrAllowAll();
         $result['workflow'] = $entity->getWorkflow();
         $result['metadataurl'] = $entity->getMetadataURL();
         $result['prettyname'] = $entity->getPrettyname();
Index: docs/janus.sql
===================================================================
--- docs/janus.sql	(revision 484)
+++ docs/janus.sql	(working copy)
@@ -58,6 +58,20 @@
   `ip` char(15) NOT NULL
 ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
 
+--
+-- Table structure for table `janus__blockedEntity`
+--
+
+DROP TABLE IF EXISTS `janus__allowedEntity`;
+CREATE TABLE IF NOT EXISTS `janus__allowedEntity` (
+  `eid` int(11) NOT NULL,
+  `revisionid` int(11) NOT NULL,
+  `remoteentityid` text NOT NULL,
+  `created` char(25) NOT NULL,
+  `ip` char(15) NOT NULL
+) ENGINE=MyISAM DEFAULT CHARSET=latin1;
+
+
 -- --------------------------------------------------------
 
 --
Index: dictionaries/janus.definition.json
===================================================================
--- dictionaries/janus.definition.json	(revision 484)
+++ dictionaries/janus.definition.json	(working copy)
@@ -212,15 +212,30 @@
 	"tab_remote_entity_saml20-idp": {
 		"en": "Service Provider (SP)"
 	},
-	"tab_remote_entity_help_saml20-idp": {
+	"tab_remote_entity_blacklist": {
+	    "en": "Blacklist"
+	},
+	"tab_remote_entity_whitelist":  {
+	    "en": "Whitelist"
+	},
+	"tab_remote_entity_help_blacklist_saml20-idp": {
 		"en": "Mark services that your users are not allowed to access."
 	},
-	"tab_remote_entity_help_saml20-sp": {
+	"tab_remote_entity_help_blacklist_saml20-sp": {
 		"en": "Mark those identity providers which are not allowed to acces your service."
 	},
+	"tab_remote_entity_help_whitelist_saml20-idp": {
+        "en": "Mark only those services that your users are allowed to access."
+    },
+    "tab_remote_entity_help_whitelist_saml20-sp": {
+        "en": "Mark only those identity providers which are allowed to acces your service."
+    },
 	"tab_remote_entity_allowall": {
 		"en": "Allow all"
 	},
+    "tab_remote_entity_allownone": {
+        "en": "Allow none"
+    },
 	"tab_metadata": {
 		"en": "Metadata"
 	},
Index: dictionaries/janus.translation.json
===================================================================
--- dictionaries/janus.translation.json	(revision 484)
+++ dictionaries/janus.translation.json	(working copy)
@@ -279,18 +279,38 @@
 		"da": "Tjenester (SP)",
 		"es": "Proveedores de Servicio (SP)"
 	},
-	"tab_remote_entity_help_saml20-idp": {
+	"tab_remote_entity_blacklist": {
+        "da": "Blacklist",
+        "es": "Blacklist"
+    },
+    "tab_remote_entity_whitelist":  {
+        "da": "Whitelist",
+        "es": "Whitelist"
+    },
+	"tab_remote_entity_help_blacklist_saml20-idp": {
 		"da": "Marker de tjenester som du ikke \u00f8nsker dine brugere skal have adgang til.",
 		"es": "Marca los servicios a los que a tus usuarios no les est\u00e1 permitido acceder"
 	},
-	"tab_remote_entity_help_saml20-sp": {
+	"tab_remote_entity_help_blacklist_saml20-sp": {
 		"da": "Marker de institutioner som du ikke \u00f8nsker brugere fra.",
 		"es": "Marca aquellos Proveedores de identidad a los que no les est\u00e1 permitido el acceso a tu servicio."
 	},
+	"tab_remote_entity_help_whitelist_saml20-idp": {
+        "da": "Mark only those services that your users are allowed to access.",
+        "es": "Mark only those services that your users are allowed to access."
+    },
+    "tab_remote_entity_help_whitelist_saml20-sp": {
+        "da": "Mark only those identity providers which are allowed to acces your service.",
+        "es": "Mark only those identity providers which are allowed to acces your service."
+    },
 	"tab_remote_entity_allowall": {
 		"da": "Tillad alle",
 		"es": "Permitir todos"
 	},
+	"tab_remote_entity_allownone": {
+        "da": "Allow none",
+        "es": "Allow none"
+    },
 	"tab_metadata": {
 		"da": "Metadata",
 		"es": "Metadatos"
Index: templates/editentity.php
===================================================================
--- templates/editentity.php	(revision 484)
+++ templates/editentity.php	(working copy)
@@ -35,16 +35,45 @@
     });
     $("#allowall_check").change(function(){
         if($(this).is(":checked")) {
-            $(".remote_check").each( function() {
+            $(".remote_check_b").each( function() {
                 this.checked = false;
             });
+            $(".remote_check_w").each( function() {
+                this.checked = false;
+            });
+            $("#allownone_check").removeAttr("checked");
         }
     });
-    $(".remote_check").change(function(){
+    $("#allownone_check").change(function(){
         if($(this).is(":checked")) {
+            $(".remote_check_w").each( function() {
+                this.checked = false;
+            });
+            $(".remote_check_b").each( function() {
+                this.checked = false;
+            });
             $("#allowall_check").removeAttr("checked");
+        } 
+    });
+    $(".remote_check_b").change(function(){
+        if($(this).is(":checked")) {
+            $("#allowall_check").removeAttr("checked");
+            $("#allownone_check").removeAttr("checked");
+             $(".remote_check_w").each( function() {
+                this.checked = false;
+            });
         }
     });
+    $(".remote_check_w").change(function(){
+        if($(this).is(":checked")) {
+            $("#allownone_check").removeAttr("checked");
+            $("#allownone_check").removeAttr("checked");
+             $(".remote_check_b").each( function() {
+                this.checked = false;
+            });
+        }
+    });
+    
     $("#entity_workflow_select").change(function () {
         var tmp;
         $("#entity_workflow_select option").each(function () {
@@ -122,14 +151,16 @@
 <ul>
     <li><a href="#entity"><?php echo $this->t('tab_edit_entity_connection'); ?></a></li>
     <?php
-    if($this->data['entity']->getType() === 'saml20-sp') {
-        echo '<li><a href="#remoteentities">'. $this->t('tab_remote_entity_saml20-sp') .'</a></li>';
-    } else {
-        echo '<li><a href="#remoteentities">'. $this->t('tab_remote_entity_saml20-idp') .'</a></li>';
+    if ($this->data['useblacklist'] || $this->data['usewhitelist']) {
+        if($this->data['entity']->getType() === 'saml20-sp') {
+            echo '<li><a href="#remoteentities">'. $this->t('tab_remote_entity_saml20-sp') .'</a></li>';
+        } else {
+            echo '<li><a href="#remoteentities">'. $this->t('tab_remote_entity_saml20-idp') .'</a></li>';
+        }
+        if($this->data['entity']->getType() === 'saml20-idp') {
+            echo '<li><a href="#disableconsent">' . $this->t('tab_disable_consent') . '</a></li>';
+        }
     }
-    if($this->data['entity']->getType() === 'saml20-idp') {
-        echo '<li><a href="#disableconsent">' . $this->t('tab_disable_consent') . '</a></li>';
-    }
     ?>
     <li><a href="#metadata"><?php echo $this->t('tab_metadata'); ?></a></li>
     <li><a href="#addmetadata"><?php echo $this->t('tab_import_metadata'); ?></a></li>
@@ -609,11 +640,11 @@
     } else {
         foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
             if(array_key_exists($remote_entityid, $this->data['disable_consent'])) {
-                echo '<input class="remote_check" type="hidden" name="add-consent[]" value="'. $remote_entityid. '" />';
-                echo '<input class="remote_check" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" checked disabled="disabled" />';
+                echo '<input class="remote_check_b" type="hidden" name="add-consent[]" value="'. $remote_entityid. '" />';
+                echo '<input class="remote_check_b" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" checked disabled="disabled" />';
                 echo '&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
             } else {
-                echo '<input class="remote_check" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" disabled />';
+                echo '<input class="remote_check_b" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" disabled />';
                 echo '&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
             }
             echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
@@ -626,47 +657,106 @@
 // DISABLE CONSENT TAB - END
 ?>
 
+<?php if ($this->data['useblacklist'] || $this->data['usewhitelist']) { ?>
 <div id="remoteentities">
-    <h2><?php echo $this->t('tab_remote_entity_'. $this->data['entity']->getType()); ?></h2>
-    <p><?php echo $this->t('tab_remote_entity_help_'. $this->data['entity']->getType()); ?></p>
-    <?php
-    $checked = '';
-    if($this->data['entity']->getAllowedall() == 'yes') {
-        $checked = 'checked';
-    }
-
-    if($this->data['uiguard']->hasPermission('blockremoteentity', $wfstate, $this->data['user']->getType())) {
-        // Access granted to block remote entities
-        echo '<input id="allowall_check" type="checkbox" name="allowedall" value="' . $this->data['entity']->getAllowedall() . '" ' . $checked . ' > ' . $this->t('tab_remote_entity_allowall');
-        echo '<hr>';
-
-        foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
-            if(array_key_exists($remote_entityid, $this->data['blocked_entities'])) {
-                echo '<input class="remote_check" type="checkbox" name="add[]" value="'. $remote_entityid. '" checked />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
-            } else {
-                echo '<input class="remote_check" type="checkbox" name="add[]" value="'. $remote_entityid. '" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+   <?php      
+        if($this->data['uiguard']->hasPermission('blockremoteentity', $wfstate, $this->data['user']->getType())) {
+            
+            if ($this->data['useblacklist']) {
+                $checked = '';
+                if($this->data['entity']->getAllowedAll() == 'yes') {
+                    $checked = 'checked';
+                }
+      
+                // Access granted to block remote entities
+                echo '<input id="allowall_check" type="checkbox" name="allowall" value="' . $this->data['entity']->getAllowedAll() . '" ' . $checked . ' > ' . $this->t('tab_remote_entity_allowall');
             }
-            echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
+            if ($this->data['usewhitelist']) {            
+                $checked = '';
+                if($this->data['entity']->getAllowedAll() != 'yes' && count($this->data['allowed_entities'])==0 && count($this->data['blocked_entities'])==0) {
+                    $checked = 'checked';
+                }
+     
+                echo '<br/><input id="allownone_check" type="checkbox" name="allownone" value="1" ' . $checked . ' > ' . $this->t('tab_remote_entity_allownone');
+            }   
+        } ?>
+        
+        
+      <?php if ($this->data['useblacklist']) { ?>
+   
+        
+        <h2><?php echo $this->t('tab_remote_entity_'. $this->data['entity']->getType()); ?> <?php echo $this->t('tab_remote_entity_blacklist'); ?></h2>
+        <p><?php echo $this->t('tab_remote_entity_help_blacklist_'. $this->data['entity']->getType()); ?></p>
+        <?php
+    
+        if($this->data['uiguard']->hasPermission('blockremoteentity', $wfstate, $this->data['user']->getType())) {
+        
+            echo '<hr>';
+    
+            foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
+                if(array_key_exists($remote_entityid, $this->data['blocked_entities'])) {
+                    echo '<input class="remote_check_b" type="checkbox" name="addBlocked[]" value="'. $remote_entityid. '" checked />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                } else {
+                    echo '<input class="remote_check_b" type="checkbox" name="addBlocked[]" value="'. $remote_entityid. '" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                }
+                echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
+            }
+        } else {
+            // Access not granted to block remote entities
+            if($checked == 'checked') {
+                echo '<input id="allowall_check" type="hidden" name="allowall" value="' . $this->data['entity']->getAllowedAll() . '" '. $checked . '>';
+            }
+            echo '<input type="checkbox" name="allowall_dummy" value="' . $this->data['entity']->getAllowAll() . '" ' . $checked . ' disabled="disabled"> ' . $this->t('tab_remote_entity_allowall') . '<hr>';
+    
+            foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
+                if(array_key_exists($remote_entityid, $this->data['blocked_entities'])) {
+                    echo '<input class="remote_check_b" type="hidden" name="addBlocked[]" value="'. $remote_entityid. '" />';
+                    echo '<input class="remote_check_b" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" checked disabled="disabled" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                } else {
+                    echo '<input class="remote_check_b" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" disabled />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()].'<br />';
+                }
+                echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
+            }
         }
-    } else {
-        // Access not granted to block remote entities
-        if($checked == 'checked') {
-            echo '<input id="allowall_check" type="hidden" name="allowedall" value="' . $this->data['entity']->getAllowedall() . '" '. $checked . '>';
-        }
-        echo '<input type="checkbox" name="allowedall_dummy" value="' . $this->data['entity']->getAllowedall() . '" ' . $checked . ' disabled="disabled"> ' . $this->t('tab_remote_entity_allowall') . '<hr>';
-
-        foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
-            if(array_key_exists($remote_entityid, $this->data['blocked_entities'])) {
-                echo '<input class="remote_check" type="hidden" name="add[]" value="'. $remote_entityid. '" />';
-                echo '<input class="remote_check" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" checked disabled="disabled" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
-            } else {
-                echo '<input class="remote_check" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" disabled />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()].'<br />';
+    } 
+    if ($this->data['usewhitelist']) { ?>
+    
+        <h2><?php echo $this->t('tab_remote_entity_'. $this->data['entity']->getType()); ?> <?php echo $this->t('tab_remote_entity_whitelist'); ?></h2>
+        <p><?php echo $this->t('tab_remote_entity_help_whitelist_'. $this->data['entity']->getType()); ?></p>
+        <?php
+    
+        if($this->data['uiguard']->hasPermission('blockremoteentity', $wfstate, $this->data['user']->getType())) {
+            // Access granted to block remote entities
+            echo '<hr>';
+    
+            foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
+                if(array_key_exists($remote_entityid, $this->data['allowed_entities'])) {
+                    echo '<input class="remote_check_w" type="checkbox" name="addAllowed[]" value="'. $remote_entityid. '" checked />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                } else {
+                    echo '<input class="remote_check_w" type="checkbox" name="addAllowed[]" value="'. $remote_entityid. '" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                }
+                echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
             }
-            echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
+        } else {
+            // Access not granted to block remote entities
+            if($checked == 'checked') {
+                echo '<input id="allownone_check" type="hidden" name="allownone" value="not used" '. $checked . '>';
+            }
+            echo '<input type="checkbox" name="allownone_dummy" value="not used" ' . $checked . ' disabled="disabled"> ' . $this->t('tab_remote_entity_allownone') . '<hr>';
+    
+            foreach($this->data['remote_entities'] AS $remote_entityid => $remote_data) {
+                if(array_key_exists($remote_entityid, $this->data['allowed_entities'])) {
+                    echo '<input class="remote_check_w" type="hidden" name="addAllowed[]" value="'. $remote_entityid. '" />';
+                    echo '<input class="remote_check_w" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" checked disabled="disabled" />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()] .'<br />';
+                } else {
+                    echo '<input class="remote_check_w" type="checkbox" name="add_dummy[]" value="'. $remote_entityid. '" disabled />&nbsp;&nbsp;'. $remote_data['name'][$this->getLanguage()].'<br />';
+                }
+                echo '&nbsp;&nbsp;&nbsp;'. $remote_data['description'][$this->getLanguage()] .'<br />';
+            }
         }
-    }
-    ?>
+    } ?>
 </div>
+<?php } ?>
 <!-- TAB METADATA -->
 <div id="metadata">
     <h2>Metadata</h2>
